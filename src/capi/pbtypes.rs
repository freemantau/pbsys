/* automatically generated by rust-bindgen 0.60.1 */
#![allow(non_snake_case, non_camel_case_types)]
#![allow(dead_code)]
#![allow(non_upper_case_globals)]

pub const DEC_ARRAY_LEN: u32 = 7;
pub const DEC_SIGN_SHIFT: u32 = 0;
pub const DEC_OVERFLOW_SHIFT: u32 = 1;
pub const DEC_UNDERFLOW_SHIFT: u32 = 2;
pub const DEC_DIVIDE_BY_ZERO_SHIFT: u32 = 3;
pub const DEC_UNDETERMINED_SHIFT: u32 = 4;
pub const DEC_PRECISION_SHIFT: u32 = 8;
pub const DATA_NULLVAL_MASK: u32 = 1;
pub const DATA_TYPEARGS_MASK: u32 = 62;
pub const DATA_REFTYPE_MASK: u32 = 192;
pub const DATA_STATUS_MASK: u32 = 256;
pub const DATA_FIELDTYPE_MASK: u32 = 512;
pub const DATA_STYLE_MASK: u32 = 7168;
pub const DATA_GROUP_MASK: u32 = 8192;
pub const DATA_ACCESS_MASK: u32 = 49152;
pub const DATA_NULLVAL_SHIFT: u32 = 0;
pub const DATA_TYPEARGS_SHIFT: u32 = 1;
pub const DATA_REFTYPE_SHIFT: u32 = 6;
pub const DATA_STATUS_SHIFT: u32 = 8;
pub const DATA_FIELDTYPE_SHIFT: u32 = 9;
pub const DATA_STYLE_SHIFT: u32 = 10;
pub const DATA_GROUP_SHIFT: u32 = 13;
pub const DATA_ACCESS_SHIFT: u32 = 14;
pub const DTDATETIME: u32 = 1;
pub const DTDATE: u32 = 2;
pub const DTTIME: u32 = 3;
pub type USHORT = ::std::os::raw::c_ushort;
pub type SHORT = ::std::os::raw::c_short;
pub type FLOAT = f32;
pub type BYTE = ::std::os::raw::c_uchar;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type PLONG = *mut LONG;
pub type VOID = ::std::os::raw::c_void;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type LPVOID = PVOID;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type UINT = ::std::os::raw::c_uint;
pub type INT = ::std::os::raw::c_int;
pub type LPTSTR = *mut ::std::os::raw::c_char;
pub type LPCSTR = *const ::std::os::raw::c_char;
pub type BOOL = ::std::os::raw::c_int;
pub type PBOOL = *mut BOOL;
pub type DOUBLE = ::std::os::raw::c_double;
pub type PDOUBLE = *mut DOUBLE;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type PLONGLONG = *mut LONGLONG;
pub const pbvalue_type_pbvalue_notype: pbvalue_type = 0;
pub const pbvalue_type_pbvalue_int: pbvalue_type = 1;
pub const pbvalue_type_pbvalue_long: pbvalue_type = 2;
pub const pbvalue_type_pbvalue_real: pbvalue_type = 3;
pub const pbvalue_type_pbvalue_double: pbvalue_type = 4;
pub const pbvalue_type_pbvalue_dec: pbvalue_type = 5;
pub const pbvalue_type_pbvalue_string: pbvalue_type = 6;
pub const pbvalue_type_pbvalue_boolean: pbvalue_type = 7;
pub const pbvalue_type_pbvalue_any: pbvalue_type = 8;
pub const pbvalue_type_pbvalue_uint: pbvalue_type = 9;
pub const pbvalue_type_pbvalue_ulong: pbvalue_type = 10;
pub const pbvalue_type_pbvalue_blob: pbvalue_type = 11;
pub const pbvalue_type_pbvalue_date: pbvalue_type = 12;
pub const pbvalue_type_pbvalue_time: pbvalue_type = 13;
pub const pbvalue_type_pbvalue_datetime: pbvalue_type = 14;
pub const pbvalue_type_pbvalue_dummy1: pbvalue_type = 15;
pub const pbvalue_type_pbvalue_dummy2: pbvalue_type = 16;
pub const pbvalue_type_pbvalue_dummy3: pbvalue_type = 17;
pub const pbvalue_type_pbvalue_char: pbvalue_type = 18;
pub const pbvalue_type_pbvalue_dummy4: pbvalue_type = 19;
pub const pbvalue_type_pbvalue_longlong: pbvalue_type = 20;
pub const pbvalue_type_pbvalue_byte: pbvalue_type = 21;
pub const pbvalue_type_pbvalue_object: pbvalue_type = 22;
pub type pbvalue_type = ::std::os::raw::c_int;
pub type OB_INST_ID = PVOID;
pub type POB_INST_ID = *mut OB_INST_ID;
pub type OB_INFO_FLAGS = USHORT;
pub type POB_INFO_FLAGS = *mut USHORT;
/* #[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OB_THIS {
    pub evaled_arglist: PVOID,
    pub curr_obinst: OB_INST_ID,
} */
#[repr(C)]
pub struct _PVM([u8;0]);
pub type _pobthis = NonNull<_PVM>;
#[repr(transparent)]
pub struct OB_THIS{
    ptr:_pobthis
}
pub type POB_THIS = _pobthis;
impl OB_THIS{
    pub fn as_ptr(&self)->POB_THIS{
        self.ptr
    }
}
//pub type POB_THIS = *mut OB_THIS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union OB_VALUE {
    pub int_val: SHORT,
    pub fl_val: FLOAT,
    pub ptr: PVOID,
    pub const_ref: PULONG,
    pub ob_inst: PVOID,
    pub id: USHORT,
    pub uint_val: USHORT,
    pub long_val: LONG,
    pub ulong_val: ULONG,
    pub byte_val: BYTE,
}
pub type POB_VALUE = *mut OB_VALUE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OB_DATA {
    pub val: OB_VALUE,
    pub info: USHORT,
    pub type_: USHORT,
}
pub type POB_DATA = *mut OB_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tagSH_DEC {
    pub v: [USHORT; 7usize],
    pub flags: USHORT,
}
pub type SH_DEC = _tagSH_DEC;
pub type PDEC = *mut _tagSH_DEC;
pub type PSH_DEC = *mut _tagSH_DEC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SH_TIME {
    pub tm_msec: LONG,
    pub tm_year: SHORT,
    pub tm_mon: BYTE,
    pub tm_mday: BYTE,
    pub tm_hour: BYTE,
    pub tm_min: BYTE,
    pub tm_sec: BYTE,
    pub tm_filler: BYTE,
}
pub type PSH_TIME = *mut SH_TIME;
pub const ot_refpak_style_OT_SIMPLE_REF: ot_refpak_style = 0;
pub const ot_refpak_style_OT_FIELD_REF: ot_refpak_style = 1;
pub const ot_refpak_style_OT_FIELD_ITEM_REF: ot_refpak_style = 2;
pub type ot_refpak_style = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ot_ref_pak_simple_ref {
    pub lvalue: POB_DATA,
}
pub type OT_FIELDUPDATE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(rtthis: POB_THIS, obinst: PVOID, field_id: UINT, index: ULONG) -> INT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ot_ref_pak_field_ref {
    pub obinst: PVOID,
    pub field_id: UINT,
    pub field_update_func: OT_FIELDUPDATE_FUNC,
    pub item_index: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union OT_REF_TAG_UNION {
    pub simple: ot_ref_pak_simple_ref,
    pub field: ot_ref_pak_field_ref,
}
pub type POT_REF_TAG_UNION = *mut OT_REF_TAG_UNION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OT_REF_PAK {
    pub style: ot_refpak_style,
    pub group_hndl: USHORT,
    pub type_: USHORT,
    pub flags: USHORT,
    pub ref_: OT_REF_TAG_UNION,
}
pub type POT_REF_PAK = *mut OT_REF_PAK;
pub const OB_FIELD_TYPE_OB_TYPEDEF_FIELD: OB_FIELD_TYPE = 0;
pub const OB_FIELD_TYPE_OB_INSTVAR_FIELD: OB_FIELD_TYPE = 1;
pub const OB_FIELD_TYPE_OB_GLOBAL_VAR: OB_FIELD_TYPE = 0;
pub const OB_FIELD_TYPE_OB_SHARED_VAR: OB_FIELD_TYPE = 1;
pub type OB_FIELD_TYPE = ::std::os::raw::c_int;
pub type POB_FIELD_TYPE = *mut OB_FIELD_TYPE;
pub const OB_MEMBER_ACCESS_OB_PUBLIC_MEMBER: OB_MEMBER_ACCESS = 0;
pub const OB_MEMBER_ACCESS_OB_PRIVATE_MEMBER: OB_MEMBER_ACCESS = 1;
pub const OB_MEMBER_ACCESS_OB_PROTECTED_MEMBER: OB_MEMBER_ACCESS = 2;
pub const OB_MEMBER_ACCESS_OB_SYSTEM_MEMBER: OB_MEMBER_ACCESS = 3;
pub type OB_MEMBER_ACCESS = ::std::os::raw::c_int;
pub type POB_MEMBER_ACCESS = *mut OB_MEMBER_ACCESS;
pub const ob_status_FREE: ob_status = 0;
pub const ob_status_USED: ob_status = 1;
pub const ob_status_OB_NOTINIT: ob_status = 1;
pub const ob_status_OB_INIT: ob_status = 0;
pub type ob_status = ::std::os::raw::c_int;
use std::ptr::NonNull;

pub use self::ob_status as OB_STATUS;
pub type POB_STATUS = *mut ob_status;
pub const ob_group_types_OB_SIMPLE: ob_group_types = 0;
pub const ob_group_types_OB_ARRAY: ob_group_types = 1;
pub type ob_group_types = ::std::os::raw::c_int;
pub use self::ob_group_types as OB_GROUPTYPE;
pub type POB_GROUPTYPE = *mut ob_group_types;
pub const ob_data_styles_UNDECLARED_STYLE: ob_data_styles = 0;
pub const ob_data_styles_INT_STYLE: ob_data_styles = 1;
pub const ob_data_styles_FLOAT_STYLE: ob_data_styles = 2;
pub const ob_data_styles_PTR_STYLE: ob_data_styles = 3;
pub const ob_data_styles_CONST_STYLE: ob_data_styles = 4;
pub const ob_data_styles_ID_STYLE: ob_data_styles = 5;
pub const ob_data_styles_OBINST_STYLE: ob_data_styles = 6;
pub const ob_data_styles_LONG_STYLE: ob_data_styles = 7;
pub type ob_data_styles = ::std::os::raw::c_int;
pub use self::ob_data_styles as OB_DATASTYLE;
pub type POB_DATASTYLE = *mut ob_data_styles;
pub const ob_ref_types_OB_DIRECT_REF: ob_ref_types = 0;
pub const ob_ref_types_OB_GLOBAL_REF: ob_ref_types = 1;
pub const ob_ref_types_OB_ARGUMENT_REF: ob_ref_types = 2;
pub const ob_ref_types_OB_ANCESTOR_REF: ob_ref_types = 2;
pub const ob_ref_types_OB_ARGUMENT_READONLY: ob_ref_types = 3;
pub type ob_ref_types = ::std::os::raw::c_int;
pub use self::ob_ref_types as OB_REFTYPE;
pub type POB_REFTYPE = *mut ob_ref_types;
pub type OB_BASE_ID = USHORT;
pub type OB_CLASS_ID = OB_BASE_ID;
pub type POB_CLASS_ID = *mut OB_BASE_ID;
pub type OB_GROUP_ID = OB_BASE_ID;
pub type POB_GROUP_ID = *mut OB_BASE_ID;
pub type OB_GROUP_HNDL = OB_GROUP_ID;
pub type POB_GROUP_HNDL = *mut OB_GROUP_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ob_class_hndl {
    pub group_hndl: OB_GROUP_HNDL,
    pub class_id: OB_CLASS_ID,
}
pub type OB_CLASS_HNDL = ob_class_hndl;
pub type POB_CLASS_HNDL = *mut ob_class_hndl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shBinary {
    pub len: ULONG,
    pub data: [BYTE; 1usize],
}
pub type SH_BINARY = shBinary;
pub type PSH_BINARY = *mut shBinary;
pub type PSH_BINARY_DATA = *mut BYTE;
pub type OB_ARRAY_ID = PVOID;
pub type POB_ARRAY_ID = *mut PVOID;
pub type OB_SYM_ID = OB_BASE_ID;
pub type POB_SYM_ID = *mut OB_BASE_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ob_data_info {
    pub sym_id: OB_SYM_ID,
    pub name: LPTSTR,
    pub class_hndl: OB_CLASS_HNDL,
    pub data: OB_DATA,
    pub enumname: LPTSTR,
    pub scope: OB_MEMBER_ACCESS,
    pub read_access: OB_MEMBER_ACCESS,
    pub write_access: OB_MEMBER_ACCESS,
    pub flags: UINT,
    pub set_func: LPTSTR,
    pub get_func: LPTSTR,
    pub lookupObject: PVOID,
    pub pWatchpoint: PVOID,
    pub isArrayElement: BOOL,
    pub arrayIndex: LONG,
    pub array_set_func: LPTSTR,
    pub array_get_func: LPTSTR,
    pub array_upper_func: LPTSTR,
}
pub type OB_DATA_INFO = ob_data_info;
pub type POB_DATA_INFO = *mut ob_data_info;
#[repr(C)]
#[derive(Debug, Copy, Clone,Default)]
pub struct ot_lvalue_info {
    pub group_hndl: OB_GROUP_HNDL,
}
pub type OT_LVALUE_INFO = ot_lvalue_info;
pub type POT_LVALUE_INFO = *mut ot_lvalue_info;

pub const OB_ARRAY_SYMBOL_STYLE_OB_UNBOUNDED_ARRAY:OB_ARRAY_SYMBOL_STYLE = 0;
pub const OB_ARRAY_SYMBOL_STYLE_OB_SIMPLE_ARRAY:OB_ARRAY_SYMBOL_STYLE = 1;
pub const OB_ARRAY_SYMBOL_STYLE_OB_COMPLEX_ARRAY:OB_ARRAY_SYMBOL_STYLE = 2;
pub type OB_ARRAY_SYMBOL_STYLE = ::std::os::raw::c_int;
pub type POB_ARRAY_SYMBOL_STYLE = *mut OB_ARRAY_SYMBOL_STYLE;